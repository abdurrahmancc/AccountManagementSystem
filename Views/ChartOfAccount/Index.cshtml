@model List<AccountManagementSystem.Models.ViewChartOfAccountModel>

@using Microsoft.AspNetCore.Html
@using System.Text


<style>

    .custom-btn-primary {
        background-color: #1abc9c;
        border: 1px solid #1abc9c;
        color: white;
        padding: 4px 10px;
        font-size: 0.875rem;
        border-radius: 4px;
        text-decoration: none;
        display: inline-block;
        transition: background-color 0.3s ease;
    }

        .custom-btn-primary:hover {
            background-color: #1abc9c;
            text-decoration: none;
            color: white;
        }

    .btn:focus, .btn:active:focus, .btn-link.nav-link:focus, .form-control:focus, .form-check-input:focus {
        box-shadow: none !important;
    }

    .tree, .tree ul {
        list-style-type: none;
        margin: 0;
        padding-left: 1rem;
        position: relative;
    }

        .tree ul {
            margin-left: 1rem;
        }

        .tree li {
            margin: 0;
            padding: 0 1rem;
            line-height: 2rem;
            color: #369;
            font-weight: 500;
            position: relative;
        }

            .tree li::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                border-left: 1px solid #ccc;
                bottom: 0;
                height: 100%;
            }

            .tree li::after {
                content: '';
                position: absolute;
                top: 1rem;
                left: 0;
                width: 1rem;
                height: 0;
                border-top: 1px solid #ccc;
            }

    .tree-item {
        cursor: pointer;
    }

        .tree-item.selected {
            background-color: #d0f0ff;
            font-weight: bold;
            border-radius: 4px;
        }
</style>


<div style="overflow-y: auto; height: 100%;">
    <input type="hidden" id="selectedAccountId" />
    <div style="display:flex; align-items:center; justify-content:space-between;">
        <h2>Chart of Accounts Tree</h2>
        <div style="display:flex; column-gap: 10px;">
            @if (ViewBag.Role == "Admin" || ViewBag.Role == "Accountant")
            {
                <a id="btnCreate" href="/ChartOfAccount/Create" class="btn btn-sm custom-btn-primary text-white">Create</a>
                <a id="btnEdit" href="/ChartOfAccount/Edit" class="btn btn-sm custom-btn-primary text-white disabled">Edit</a>
                <button id="btnDelete" type="button" class="btn btn-sm custom-btn-primary text-white disabled">
                    Delete
                </button>
                <button id="btnPrint" type="button" class="btn btn-sm custom-btn-primary text-white">
                    Print
                </button>
            }
        </div>


    </div>

    <div class="tree" id="tree-container">
        @Html.Raw(RenderTree(Model))
    </div>
@functions {
    public HtmlString RenderTree(List<AccountManagementSystem.Models.ViewChartOfAccountModel> items)
    {
        var sb = new StringBuilder();
        sb.Append("<ul>");
        foreach (var item in items)
        {
            sb.Append($@"<li class='tree-item' data-id='{item.Id}'>");
            sb.Append(item.Code);
            sb.Append(" - ");
            sb.Append(item.AccountHead);
            if (item.Children != null && item.Children.Any())
            {
                sb.Append(RenderTree(item.Children));
            }
        }
        sb.Append("</ul>");
        return new HtmlString(sb.ToString());
    }
}
</div>


@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

<script>

        var btnDelete = document.getElementById("btnDelete");
        if(btnDelete){
            btnDelete.addEventListener("click", function () {
            var accountId = document.getElementById("selectedAccountId").value;
            if (!accountId) {
                alert("Please select an account to delete.");
                return;
            }
            fetch(`/ChartOfAccount/Delete/${accountId}`, {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({}) 
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text || 'Server error') });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    alert("Account deleted successfully.");
                    location.reload();
                } else {
                    alert("Delete failed: " + data.message);
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("An error occurred: " + error.message);
            });
        });
        }




    document.addEventListener("DOMContentLoaded", function () {
        const items = document.querySelectorAll('.tree-item');
        const btnCreate = document.getElementById('btnCreate');
        const btnEdit = document.getElementById('btnEdit');
        const btnDelete = document.getElementById('btnDelete');
        const selectedInput = document.getElementById('selectedAccountId');


        function fetchAccountById(id) {
        fetch(`/ChartOfAccount/GetChartOfAccountById?id=${id}`)
            .then(response => {
                if (!response.ok) throw new Error("Data not found");
                return response.json();
            })
            .then(data => {
                if(data.isLastLevel){
                        btnCreate.classList.add('disabled');
                }else{
                        btnCreate.classList.remove('disabled');
                }
            })
            .catch(error => {
                console.error("Error fetching account:", error);
            });
        }

        let selectedLi = null;

        items.forEach(function (li) {
            li.addEventListener('click', function (e) {
                e.stopPropagation();
                        
                   

                if (selectedLi) {
                    selectedLi.classList.remove('selected');
                }

                selectedLi = li;
                li.classList.add('selected');

                const id = li.getAttribute('data-id');
                selectedInput.value = id;

                fetchAccountById(selectedInput.value);

                btnEdit.classList.remove('disabled');
                btnEdit.href = `/ChartOfAccount/Edit/${id}`;


                btnCreate.href = `/ChartOfAccount/Create?id=${id}`;

                btnDelete.classList.remove('disabled');
                btnDelete.href = `/ChartOfAccount/Delete/${id}`;
                btnDelete.onclick = () => confirm('Are you sure you want to delete this item?');
            });
        });
    });

    let btnPrint =  document.getElementById("btnPrint");
    if(btnPrint){
        btnPrint.addEventListener("click", function () {
            debugger;
            downloadTreeAsExcel();
        });
    }


    function downloadTreeAsExcel() {
        const container = document.getElementById("tree-container");
        const rows = [];

        function parseTree(ul, parent = "") {
            const children = ul.children;
            for (let li of children) {
                if (li.tagName === "LI") {
                    const id = li.getAttribute("data-id") || "";
                    const text = li.childNodes[0]?.textContent.trim() || "";
                    rows.push([id, text, parent]);

                    const nestedUl = li.querySelector("ul");
                    if (nestedUl) {
                        parseTree(nestedUl, text);
                    }
                }
            }
        }

        const ul = container.querySelector("ul");
        if (ul) {
            parseTree(ul);
        }

        const ws = XLSX.utils.aoa_to_sheet([["ID", "Account", "Parent"]].concat(rows));
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "ChartOfAccounts");
        XLSX.writeFile(wb, "ChartOfAccounts.xlsx");
    }

</script>
}